{"version":3,"sources":["actions/actionTypes.js","actions/actionCreators.js","Skills.js","App.js","serviceWorker.js","reducers/skills.js","api/index.js","sagas/index.js","store/index.js","index.js"],"names":["SEARCH_SKILLS_REQUEST","SEARCH_SKILLS_FAILURE","SEARCH_SKILLS_SUCCESS","CHANGE_SEARCH_FIELD","searchSkillsSuccess","items","type","payload","Skills","useSelector","state","skills","loading","error","search","dispatch","useDispatch","hasQuery","trim","value","onChange","evt","target","changeSearchField","map","o","name","id","App","Boolean","window","location","hostname","match","initialState","searchSkills","a","params","URLSearchParams","q","fetch","process","response","ok","Error","statusText","json","watchChangeSearchSaga","handleChangeSearchSaga","watchSearchSkillsSaga","handleSearchSkillsSaga","saga","debounce","action","put","takeLatest","retry","data","message","spawn","reducer","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.06be8e63.chunk.js","sourcesContent":["export const SEARCH_SKILLS_REQUEST = 'SEARCH_SKILLS_REQUEST';\nexport const SEARCH_SKILLS_FAILURE = 'SEARCH_SKILLS_FAILURE';\nexport const SEARCH_SKILLS_SUCCESS = 'SEARCH_SKILLS_SUCCESS';\nexport const CHANGE_SEARCH_FIELD   = 'CHANGE_SEARCH_FIELD';","import {\n  CHANGE_SEARCH_FIELD,\n  SEARCH_SKILLS_REQUEST,\n  SEARCH_SKILLS_FAILURE,\n  SEARCH_SKILLS_SUCCESS,\n} from './actionTypes';\n\n\nexport const searchSkillsRequest = search => ({\n  type: SEARCH_SKILLS_REQUEST,\n  payload: { search },\n});\n\nexport const searchSkillsFailure = error => ({\n  type: SEARCH_SKILLS_FAILURE,\n  payload: { error },\n});\n\nexport const searchSkillsSuccess = items => ({\n  type: SEARCH_SKILLS_SUCCESS,\n  payload: { items },\n});\n\nexport const changeSearchField = search => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: { search },\n});","import React, { Fragment } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changeSearchField } from './actions/actionCreators';\n\nexport default function Skills() {\n  const { items, loading, error, search } = useSelector(state => state.skills);\n  const dispatch = useDispatch();\n\n  const handleSearch = evt => {\n    const { value } = evt.target;\n    dispatch(changeSearchField(value));\n  };\n\n  const hasQuery = search.trim() !== '';\n  \n  return (\n    <Fragment>\n      <div><input type=\"search\" value={search} onChange={handleSearch} /></div>\n      {!hasQuery && <div>Type something to search</div>}\n      {hasQuery && loading && <div>searching...</div>}\n      {error ? <div>Error occured</div> : <ul>{items.map(o => <li key={o.id}>{o.name}</li>)}</ul>}\n    </Fragment>\n  )\n}\n","import React from 'react';\nimport './App.css';\nimport Skills from './Skills';\n\nfunction App() {\n  return (\n    <Skills />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  SEARCH_SKILLS_REQUEST,\n  SEARCH_SKILLS_FAILURE,\n  SEARCH_SKILLS_SUCCESS,\n  CHANGE_SEARCH_FIELD,\n} from '../actions/actionTypes'\n\nconst initialState = {\n  items: [],\n  loading: false,\n  error: null,\n  search: '',\n};\n\nexport default function skillsReducer(state = initialState, action) {\n  switch (action.type) {\n    case SEARCH_SKILLS_REQUEST:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      };\n      \n    case SEARCH_SKILLS_FAILURE:\n      const { error } = action.payload;\n      return {\n        ...state,\n        loading: false,\n        error,\n      };\n      \n    case SEARCH_SKILLS_SUCCESS:\n      const { items } = action.payload;\n      return {\n        ...state,\n        items,\n        loading: false,\n        error: null,\n      };\n      \n    case CHANGE_SEARCH_FIELD:\n      const { search } = action.payload;\n      return {\n        ...state,\n        search,\n      };\n      \n    default:\n      return state;\n  }\n}\n","export const searchSkills = async (search) => {\n  const params = new URLSearchParams({ q: search });\n  const response = await fetch(`${process.env.REACT_APP_SEARCH_URL}?${params}`);\n  if (!response.ok) {\n    throw new Error(response.statusText);\n  }\n  return await response.json();\n}","import { takeLatest, put, spawn, debounce, retry } from 'redux-saga/effects';\nimport { searchSkillsRequest, searchSkillsSuccess, searchSkillsFailure } from '../actions/actionCreators';\nimport { CHANGE_SEARCH_FIELD, SEARCH_SKILLS_REQUEST } from '../actions/actionTypes';\nimport { searchSkills } from '../api/index';\n\n// watcher\nfunction* watchChangeSearchSaga() {\n  yield debounce(100, CHANGE_SEARCH_FIELD, handleChangeSearchSaga);\n}\n\n// worker\nfunction *handleChangeSearchSaga(action) {\n  yield put(searchSkillsRequest(action.payload.search.trim()));\n}\n\n// watcher\nfunction* watchSearchSkillsSaga() {\n  yield takeLatest(SEARCH_SKILLS_REQUEST, handleSearchSkillsSaga);\n}\n\n// worker\nfunction* handleSearchSkillsSaga(action) {\n  if (action.payload.search) {\n    try {\n      const retryCount = 3;\n      const retryDelay = 1 * 1000; // ms\n      const data = yield retry(retryCount, retryDelay, searchSkills, action.payload.search);\n      yield put(searchSkillsSuccess(data));\n    } catch (e) {\n      yield put(searchSkillsFailure(e.message));\n    }\n  } else {\n    yield put(searchSkillsSuccess([]));\n  }\n}\n\nexport default function* saga() {\n  yield spawn(watchChangeSearchSaga);\n  yield spawn(watchSearchSkillsSaga)\n}","import { createStore, combineReducers, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport skillsReducer from '../reducers/skills';\nimport saga from '../sagas';\n\nconst reducer = combineReducers({\n  skills: skillsReducer,\n});\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(reducer, composeEnhancers(\n  applyMiddleware(sagaMiddleware)\n));\n\nsagaMiddleware.run(saga);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\nimport {Provider} from 'react-redux';\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}